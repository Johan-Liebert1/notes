FROM quay.io/fedora/fedora:42 AS STEP1

RUN --mount=type=cache,target=/var/cache/libdnf5 <<EOF
    set -eux

    mkdir -p /etc/dracut.conf.d
    echo export DRACUT_NO_XATTR=1 > /etc/dracut.conf.d/no-xattr.conf

    dnf --setopt keepcache=1 install --allowerasing -y \
        btrfs-progs \
        composefs \
        dosfstools \
        kernel \
        openssh-server \
        policycoreutils-python-utils \
        selinux-policy-targeted \
        skopeo \
        strace \
        systemd \
        systemd-boot-unsigned \
        systemd-ukify \
        sbsigntools \
        util-linux
EOF

# --- Everything above this line should hopefully stay cached ---

COPY extra /
COPY cfsctl /usr/bin

RUN passwd -d root

RUN dnf install -y dracut

RUN ls -lah /usr/lib/modules

RUN set -x; \
    kver=$(cd /usr/lib/modules && echo *); \
    dracut -vf /usr/lib/modules/$kver/initramfs.img $kver;

RUN mkdir /sysroot

FROM STEP1 as kernel

ARG COMPOSEFS_FSVERITY

RUN <<EOF
    set -eux

    mkdir -p /etc/kernel /etc/dracut.conf.d

    # Passing rootfstype=ext4 here due to e2fsprogs shenanigans
    ROOT_RW="root=UUID=4f68bce3-e8cd-4db1-96e7-fbcaf984b709 rootfstype=ext4 rw"
    CMDLINE="console=ttyS0,115200 composefs=${COMPOSEFS_FSVERITY} enforcing=0 systemd.debug_shell=1 ${ROOT_RW}" 

    echo $CMDLINE > /etc/kernel/cmdline

    kver=$(cd /usr/lib/modules && echo *)

    ukify build \
        --linux "/usr/lib/modules/$kver/vmlinuz" \
       --os-release "@/etc/os-release" \
       --initrd "/usr/lib/modules/$kver/initramfs.img" \
        --uname="${kver}" \
        --cmdline "@/etc/kernel/cmdline" \
        --measure \
        --json pretty \
        --output "/boot/$kver.efi"

    mkdir -p "/boot/$kver.efi.extra.d"

    # UKI addon for ignition
    ukify build \
        --cmdline "ignition.firstboot ignition.platform.id=qemu" \
        --output "/boot/$kver.efi.extra.d/cmdline-extend.addon.efi"
EOF

FROM STEP1 as final

RUN --mount=type=bind,from=kernel,target=/_mount/kernel <<EOF
    kver=$(cd /usr/lib/modules && echo *)
    mkdir -p /boot/EFI/Linux
    cp -r "/_mount/kernel/boot/." "/boot/EFI/Linux/."
EOF

FROM STEP1 as final-final
COPY --from=final /boot /boot
